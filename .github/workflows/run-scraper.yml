name: Run Playwright Scraper

# ==============================================================================
# ─── TRIGGERS ─────────────────────────────────────────────────────────────────
# This section defines WHEN the scraper runs.
# ==============================================================================
on:
  # 1. MANUAL TRIGGER: Allows you to run the scraper anytime from the "Actions" tab in GitHub.
  workflow_dispatch:

  # 2. SCHEDULED RUNS:
  #    This workflow runs at the start of EVERY hour. A check job then determines
  #    if it's the correct UK local time to proceed with the main scrape.
  schedule:
    - cron: '0 * * * *'

# Abort an older run of the same branch if a new one starts
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'
  PLAYWRIGHT_BROWSERS_PATH: /opt/playwright
  # DEFINE YOUR TARGET UK HOURS HERE (24-hour format)
  # The main job will only run if the current UK hour is in this list.
  UK_TARGET_HOURS: '10 11 01 20'

jobs:
  # ==============================================================================
  # JOB 1: CHECK TIME
  # This job runs every hour, checks the current time in London, and decides
  # whether the main 'scrape-and-submit' job should run.
  # ==============================================================================
  check-time:
    runs-on: ubuntu-latest
    outputs:
      # This output will be 'true' if it's the right time, 'false' otherwise.
      run_job: ${{ steps.check_hour.outputs.run_job }}
    steps:
      - name: Check current UK hour against target hours
        id: check_hour
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual trigger detected. The main job will run."
            echo "run_job=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Get the current hour in London timezone (e.g., "09", "10", "17")
          # Use %H to ensure leading zeros so values match the UK_TARGET_HOURS list
          CURRENT_UK_HOUR=$(TZ="Europe/London" date +'%H')

          echo "Current UK hour is: ${CURRENT_UK_HOUR}"
          echo "Target hours are: ${{ env.UK_TARGET_HOURS }}"

          # Check if the current hour is in our list of target hours
          if [[ " ${{ env.UK_TARGET_HOURS }} " =~ " ${CURRENT_UK_HOUR} " ]]; then
            echo "It's a target time. The main job will run."
            echo "run_job=true" >> $GITHUB_OUTPUT
          else
            echo "Not a target time. The main job will be skipped."
            echo "run_job=false" >> $GITHUB_OUTPUT
          fi

  # ==============================================================================
  # JOB 2: SCRAPE AND SUBMIT
  # This is your main job. It will ONLY run if the 'check-time' job above
  # determined that it's the correct time.
  # ==============================================================================
  scrape-and-submit:
    # This job depends on the 'check-time' job completing first.
    needs: check-time
    # This is the crucial line: it only runs if the output from the previous job is 'true'.
    if: needs.check-time.outputs.run_job == 'true'

    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
    - uses: actions/checkout@v4

    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Python dependencies
      run: pip install -r requirements.txt

    - name: Install Playwright browsers & deps
      run: python -m playwright install --with-deps chromium

    - name: Build runtime config from Secrets
      env:
        FORM_URL:        ${{ secrets.FORM_URL }}
        LOGIN_URL:       ${{ secrets.LOGIN_URL }}
        SECRET_KEY:      ${{ secrets.SECRET_KEY }}
        LOGIN_EMAIL:     ${{ secrets.LOGIN_EMAIL }}
        LOGIN_PASSWORD:  ${{ secrets.LOGIN_PASSWORD }}
        OTP_SECRET_KEY:  ${{ secrets.OTP_SECRET_KEY }}
        CHAT_WEBHOOK_URL: ${{ secrets.CHAT_WEBHOOK_URL }}
      run: |
        cat > config.json <<JSON
        {
          "debug": false,
          "form_url":        "${FORM_URL}",
          "login_url":       "${LOGIN_URL}",
          "secret_key":      "${SECRET_KEY}",
          "login_email":     "${LOGIN_EMAIL}",
          "login_password":  "${LOGIN_PASSWORD}",
          "otp_secret_key":  "${OTP_SECRET_KEY}",
          "chat_webhook_url": "${CHAT_WEBHOOK_URL}",
          "max_concurrency": 35,
          "initial_concurrency": 5,
          "num_form_submitters": 2,
          "page_timeout_ms": 90000,
          "element_wait_timeout_ms": 20000,
          "auto_concurrency": { "enabled": true }
        }
        JSON

    - name: Run scraper
      run: python scraper.py

    - name: Upload artifacts on failure or success
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: scraper-output-${{ github.run_id }}
        path: |
          output/
          app.log
          state.json
        retention-days: 7
